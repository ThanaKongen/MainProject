@page "/PrivateCustomer/Create"
@inject IPrivateCustomerService PrivateCustomerService
@inject NavigationManager Navi
@using DanBase.Shared.CustomerModels.Command

<h3>CreateCustomer</h3>

@if (Loading == true)
{
    <i class="fa fa-circle-o-notch fa-spin myicons" aria-hidden="true"></i>
}

<div class="form-group">
    <button @onclick="Create">Create</button>
    <label>Company Id</label>
    <input class="form-control" type="text" id="CompanyId" @bind="customer.CompanyId" />
    <label>First name</label>
    <input class="form-control" type="text" id="FirstName" @bind="customer.FirstName" />
    <label>Last name</label>
    <input class="form-control" type="text" id="LastName" @bind="customer.LastName" />
    <label>CPR</label>
    <input class="form-control" type="text" id="CPR" @bind="customer.CPR" />
    <label>User name</label>
    <input class="form-control" type="text" id="UserName" @bind="customer.Username" />
    <label>Password</label>
    <input class="form-control" type="password" id="Password" @bind="customer.Password" />
    <label>Text</label>
    <input class="form-control" type="text" id="Text" @bind="customer.Text" />
    <label>Account</label>
    <input class="form-control" type="text" id="Account" @bind="customer.AccountNo" />
</div>

@code {

    PrivateCustomerCommandDto.AddCustomer customer = new PrivateCustomerCommandDto.AddCustomer();
    private List<Models.PrivateCustomer.PrivateCustomerDetails> Customer;
    private List<Models.PrivateCustomer.PrivateCustomerDetails> Filtered = new List<Models.PrivateCustomer.PrivateCustomerDetails>();

    private bool Loading;

    async void Create()
    {
        Loading = true;
        PrivateCustomerService.Create(customer);
        await GetCreatedCustomer();
        GoToAddress();
        Loading = false;
    }

    private async Task GetCreatedCustomer()
    {
        System.Threading.Thread.Sleep(1000);
        //await Task.Delay(5000);
        Customer = await PrivateCustomerService.GetAll();
    }

    private List<Models.PrivateCustomer.PrivateCustomerDetails> GetFilteredCustomer()
    {
        Filtered = Customer.Where(x => x != null
      && x.companyId == customer.CompanyId
      && x.firstName == customer.FirstName
      && x.lastName == customer.LastName
      && x.cpr == customer.CPR
      && x.username == customer.Username
      && x.password == customer.Password
      && x.text == customer.Text
      && x.accountNo == customer.AccountNo
      ).ToList();

        return Filtered;
    }

    private void GoToAddress()
    {
        if (Customer != null)
        {

            foreach (var CreatedCustomer in GetFilteredCustomer())
            {

                Navi.NavigateTo($"/PrivateCustomer/AddAddress/{CreatedCustomer.id}");
            }
        }
    }
}
